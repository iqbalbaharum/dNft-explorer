/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.9.5
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import type { CallParams$$ } from '@fluencelabs/fluence/dist/internal/compilerSupport/v4'
import {
    callFunction$$,
    registerService$$,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v4';


// Services

export interface FdbDef {
    add: (key: string, data: string, public_key: string, signature: string, callParams: CallParams$$<'key' | 'data' | 'public_key' | 'signature'>) => { err_msg: string; success: boolean; } | Promise<{ err_msg: string; success: boolean; }>;
    am_i_owner: (callParams: CallParams$$<null>) => boolean | Promise<boolean>;
    generate_new_keypair: (callParams: CallParams$$<null>) => { pk: string; sk: string; } | Promise<{ pk: string; sk: string; }>;
    get_cids_from_dht: (key: string, callParams: CallParams$$<'key'>) => { datas: { cid: string; key: string; public_key: string; }[]; error: string; success: boolean; } | Promise<{ datas: { cid: string; key: string; public_key: string; }[]; error: string; success: boolean; }>;
    get_datasets: (key: string, callParams: CallParams$$<'key'>) => string[] | Promise<string[]>;
    init_service: (callParams: CallParams$$<null>) => { err_msg: string; success: boolean; } | Promise<{ err_msg: string; success: boolean; }>;
    ipfs_dag_get: (cid: string, callParams: CallParams$$<'cid'>) => { data: string; error: string; success: boolean; } | Promise<{ data: string; error: string; success: boolean; }>;
}
export function registerFdb(serviceId: string, service: FdbDef): void;
export function registerFdb(peer: FluencePeer, serviceId: string, service: FdbDef): void;
       

export function registerFdb(...args: any) {
    registerService$$(
        args,
        {
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "add" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "key" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "data" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "public_key" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "signature" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "FdbResult",
                            "fields" : {
                                "err_msg" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "success" : {
                                    "tag" : "scalar",
                                    "name" : "bool"
                                }
                            }
                        }
                    ]
                }
            },
            "am_i_owner" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    ]
                }
            },
            "generate_new_keypair" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "FdbKeyPair",
                            "fields" : {
                                "pk" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "sk" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        }
                    ]
                }
            },
            "get_cids_from_dht" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "key" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "FdbGetResults",
                            "fields" : {
                                "datas" : {
                                    "tag" : "array",
                                    "type" : {
                                        "tag" : "struct",
                                        "name" : "FdbDht",
                                        "fields" : {
                                            "cid" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "key" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "public_key" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            }
                                        }
                                    }
                                },
                                "error" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "success" : {
                                    "tag" : "scalar",
                                    "name" : "bool"
                                }
                            }
                        }
                    ]
                }
            },
            "get_datasets" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "key" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        }
                    ]
                }
            },
            "init_service" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "FdbResult",
                            "fields" : {
                                "err_msg" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "success" : {
                                    "tag" : "scalar",
                                    "name" : "bool"
                                }
                            }
                        }
                    ]
                }
            },
            "ipfs_dag_get" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "cid" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "FdbGetResult",
                            "fields" : {
                                "data" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "error" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "success" : {
                                    "tag" : "scalar",
                                    "name" : "bool"
                                }
                            }
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
 

export function get_content_from_cid(
    cid: string,
    config?: {ttl?: number}
): Promise<{ data: string; error: string; success: boolean; }[]>;

export function get_content_from_cid(
    peer: FluencePeer,
    cid: string,
    config?: {ttl?: number}
): Promise<{ data: string; error: string; success: boolean; }[]>;

export function get_content_from_cid(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "cid") [] cid)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call "12D3KooWFEwNWcHqi9rtsmDhsYcDbRUCDXH84RC4FW6UfsFWaoHi" ("730f04b3-f16e-4de3-8e52-5e00b56439a7" "ipfs_dag_get") [cid] $results)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (seq
                        (canon %init_peer_id% $results  #results_canon)
                        (call %init_peer_id% ("callbackSrv" "response") [#results_canon])
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_content_from_cid",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "cid" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "struct",
                        "name" : "FdbGetResult",
                        "fields" : {
                            "data" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "error" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "success" : {
                                "tag" : "scalar",
                                "name" : "bool"
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Generate_new_keypairResult = { pk: string; sk: string; }
export function generate_new_keypair(
    config?: {ttl?: number}
): Promise<Generate_new_keypairResult>;

export function generate_new_keypair(
    peer: FluencePeer,
    config?: {ttl?: number}
): Promise<Generate_new_keypairResult>;

export function generate_new_keypair(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call "12D3KooWFEwNWcHqi9rtsmDhsYcDbRUCDXH84RC4FW6UfsFWaoHi" ("730f04b3-f16e-4de3-8e52-5e00b56439a7" "generate_new_keypair") [] result)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [result])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "generate_new_keypair",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "FdbKeyPair",
                    "fields" : {
                        "pk" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "sk" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function get_cids_from_table(
    key: string,
    config?: {ttl?: number}
): Promise<{ datas: { cid: string; key: string; public_key: string; }[]; error: string; success: boolean; }[]>;

export function get_cids_from_table(
    peer: FluencePeer,
    key: string,
    config?: {ttl?: number}
): Promise<{ datas: { cid: string; key: string; public_key: string; }[]; error: string; success: boolean; }[]>;

export function get_cids_from_table(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "key") [] key)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call "12D3KooWFEwNWcHqi9rtsmDhsYcDbRUCDXH84RC4FW6UfsFWaoHi" ("730f04b3-f16e-4de3-8e52-5e00b56439a7" "get_cids_from_dht") [key] $results)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (seq
                        (canon %init_peer_id% $results  #results_canon)
                        (call %init_peer_id% ("callbackSrv" "response") [#results_canon])
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "get_cids_from_table",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "key" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "struct",
                        "name" : "FdbGetResults",
                        "fields" : {
                            "datas" : {
                                "tag" : "array",
                                "type" : {
                                    "tag" : "struct",
                                    "name" : "FdbDht",
                                    "fields" : {
                                        "cid" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "key" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "public_key" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        }
                                    }
                                }
                            },
                            "error" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "success" : {
                                "tag" : "scalar",
                                "name" : "bool"
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function ipfs_dag_get(
    cid: string,
    config?: {ttl?: number}
): Promise<{ data: string; error: string; success: boolean; }[]>;

export function ipfs_dag_get(
    peer: FluencePeer,
    cid: string,
    config?: {ttl?: number}
): Promise<{ data: string; error: string; success: boolean; }[]>;

export function ipfs_dag_get(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "cid") [] cid)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call "12D3KooWFEwNWcHqi9rtsmDhsYcDbRUCDXH84RC4FW6UfsFWaoHi" ("730f04b3-f16e-4de3-8e52-5e00b56439a7" "ipfs_dag_get") [cid] $results)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (seq
                        (canon %init_peer_id% $results  #results_canon)
                        (call %init_peer_id% ("callbackSrv" "response") [#results_canon])
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "ipfs_dag_get",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "cid" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "struct",
                        "name" : "FdbGetResult",
                        "fields" : {
                            "data" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "error" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "success" : {
                                "tag" : "scalar",
                                "name" : "bool"
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function add_data(
    key: string,
    data: string,
    public_key: string,
    signature: string,
    config?: {ttl?: number}
): Promise<{ err_msg: string; success: boolean; }[]>;

export function add_data(
    peer: FluencePeer,
    key: string,
    data: string,
    public_key: string,
    signature: string,
    config?: {ttl?: number}
): Promise<{ err_msg: string; success: boolean; }[]>;

export function add_data(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "key") [] key)
                           )
                           (call %init_peer_id% ("getDataSrv" "data") [] data)
                          )
                          (call %init_peer_id% ("getDataSrv" "public_key") [] public_key)
                         )
                         (call %init_peer_id% ("getDataSrv" "signature") [] signature)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (seq
                          (call "12D3KooWFEwNWcHqi9rtsmDhsYcDbRUCDXH84RC4FW6UfsFWaoHi" ("730f04b3-f16e-4de3-8e52-5e00b56439a7" "init_service") [])
                          (call "12D3KooWFEwNWcHqi9rtsmDhsYcDbRUCDXH84RC4FW6UfsFWaoHi" ("730f04b3-f16e-4de3-8e52-5e00b56439a7" "add") [key data public_key signature] $resultValue)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (seq
                        (canon %init_peer_id% $resultValue  #resultValue_canon)
                        (call %init_peer_id% ("callbackSrv" "response") [#resultValue_canon])
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "add_data",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "key" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "data" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "public_key" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "signature" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "struct",
                        "name" : "FdbResult",
                        "fields" : {
                            "err_msg" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "success" : {
                                "tag" : "scalar",
                                "name" : "bool"
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

/* eslint-enable */